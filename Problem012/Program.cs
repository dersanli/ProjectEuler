using System;

namespace Problem012
{
	class MainClass
	{
		/*
			The sequence of triangle numbers is generated by adding the natural numbers.
			So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
			The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

			Let us list the factors of the first seven triangle numbers:

			     1: 1
			     3: 1,3
			     6: 1,2,3,6
			    10: 1,2,5,10
			    15: 1,3,5,15
			    21: 1,3,7,21
			    28: 1,2,4,7,14,28

			We can see that 28 is the first triangle number to have over five divisors.

			What is the value of the first triangle number to have over five hundred divisors?
		*/

		const bool ConsoleOut = true;

		public static void Main (string[] args)
		{
			DateTime Start = DateTime.Now;
			ulong Counter = 1;
			ulong CurrentTriangle = 0;
			int NumFactors = 0;

			do {
				CurrentTriangle += Counter;
				NumFactors = CountNumFactors(CurrentTriangle);
				Counter++;
			} while (NumFactors < 500);
			Console.WriteLine ("Elapsed Time: {0}", DateTime.Now - Start);
		}

		static int CountNumFactors(ulong TriangleNumber) {

			if(ConsoleOut)
				Console.Write ("Triangle Number: {0,10}: ", TriangleNumber);

			int NumFactors = 0;
			ulong max = (ulong)Math.Sqrt(TriangleNumber);  //round down
			for(ulong factor = 1; factor <= max; ++factor) { //test from 1 to the square root, or the int below it, inclusive.
				if(TriangleNumber % factor == 0) {
					NumFactors++;
//					if(ConsoleOut)
//						Console.Write("{0} ", factor);
					if(factor != TriangleNumber/factor) { // Don't add the square root twice!  Thanks Jon
						NumFactors++;
//						if(ConsoleOut)
//							Console.Write("{0} ", TriangleNumber/factor);
					}
				}
			}
			if (ConsoleOut) {
				Console.Write ("({0, 3})", NumFactors);
				Console.WriteLine ();
			}
			return NumFactors;
		}
	}
}